{"version":3,"sources":["Header.js","ToDoList.js","ToDoItem.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","ToDoList","toDoItemRef","React","createRef","createToDo","e","preventDefault","toDo","item","current","value","addToDo","currentTarget","reset","onSubmit","this","placeholder","ref","type","Component","ToDoItem","details","onClick","completeToDo","index","removeToDo","App","state","items","completeItems","removedItems","toDoItems","push","setState","splice","completedToDos","Object","keys","map","key","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAQeA,EANA,SAAAC,GAAK,OAChB,gCACI,wBAAIC,UAAU,iBAAiBD,EAAME,SCoB9BC,E,4MArBXC,YAAcC,IAAMC,Y,EACpBC,WAAa,SAAAC,GACTA,EAAEC,iBACF,IAAMC,EAAO,CACTC,KAAM,EAAKP,YAAYQ,QAAQC,OAEnC,EAAKb,MAAMc,QAAQJ,GACnBF,EAAEO,cAAcC,S,uDAGhB,OACI,yBAAKf,UAAU,gBACX,0BAAMgB,SAAUC,KAAKX,YACjB,2BAAON,UAAU,sBAAsBkB,YAAY,OAAOC,IAAKF,KAAKd,cACpE,4BAAQH,UAAU,uBAAuBoB,KAAK,UAA9C,oB,GAfGhB,IAAMiB,WCedC,E,uKAdF,IAAD,OACGZ,EAAQO,KAAKlB,MAAMwB,QAAnBb,KACP,OACI,wBAAIV,UAAU,kBACV,uBAAGA,UAAU,kBAAkBU,GAC/B,yBAAKV,UAAU,qBACX,4BAAQA,UAAU,mBAAmBwB,QAAS,kBAAM,EAAKzB,MAAM0B,aAAa,EAAK1B,MAAM2B,SAAvF,UACA,4BAAQ1B,UAAU,4CAA4CwB,QAAS,kBAAM,EAAKzB,MAAM4B,WAAW,EAAK5B,MAAM2B,SAA9G,gB,GARGtB,IAAMiB,WCsDdO,G,kNAjDbC,MAAQ,CACNC,MAAO,GACPC,cAAe,EACfC,aAAc,I,EAEhBnB,QAAU,SAAAH,GACR,IAAMuB,EAAS,YAAO,EAAKJ,MAAMC,OACjCG,EAAUC,KAAKxB,GACf,EAAKyB,SAAS,CACZL,MAAQG,K,EAGZN,WAAa,SAAAjB,GACX,IAAMuB,EAAS,YAAO,EAAKJ,MAAMC,OACjCG,EAAUG,OAAO1B,EAAK,GACtB,EAAKyB,SAAS,CACZL,MAAQG,K,EAGZR,aAAe,SAAAf,GACb,IAAM2B,EAAiB,EAAKR,MAAME,cAAgB,EAC5CE,EAAS,YAAO,EAAKJ,MAAMC,OACjCG,EAAUG,OAAO1B,EAAK,GACtB,EAAKyB,SAAS,CACZL,MAAQG,EACRF,cAAeM,K,uDAGT,IAAD,OACP,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,CAAQC,MAAM,eACd,kBAAC,EAAD,CAAUY,QAASI,KAAKJ,UACxB,wBAAIb,UAAU,YACXsC,OAAOC,KAAKtB,KAAKY,MAAMC,OACrBU,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CACZA,IAAKA,EACLf,MAAOe,EACPlB,QAAS,EAAKM,MAAMC,MAAMW,GAC1Bd,WAAY,EAAKA,WACjBF,aAAc,EAAKA,mBAGvB,yBAAKiB,MAAM,aAAX,aAAkCzB,KAAKY,MAAME,oB,GA5CnC3B,IAAMiB,YCMJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.11d1061a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = props => (\n    <header>\n        <h1 className=\"header__title\">{props.title}</h1>\n    </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nclass ToDoList extends React.Component{\n    toDoItemRef = React.createRef();\n    createToDo = e => {\n        e.preventDefault();\n        const toDo = {\n            item: this.toDoItemRef.current.value\n        }\n        this.props.addToDo(toDo);\n        e.currentTarget.reset();\n    }\n    render(){\n        return(\n            <div className=\"toDoListForm\">\n                <form onSubmit={this.createToDo}>\n                    <input className=\"toDoListForm__input\" placeholder=\"Task\" ref={this.toDoItemRef}/>\n                    <button className=\"toDoListForm__button\" type=\"submit\"> Add Task </button>\n                </form>\n            </div>\n        );\n    };\n}\n\nexport default ToDoList;","import React from 'react';\n\nclass ToDoItem extends React.Component{\n    render(){\n        const {item} = this.props.details;\n        return(\n            <li className=\"toDoList__item\">\n                <p className=\"toDoList__text\">{item}</p>\n                <div className=\"toDoList__buttons\">\n                    <button className=\"toDoList__button\" onClick={() => this.props.completeToDo(this.props.index)}>&#10004;</button>\n                    <button className=\"toDoList__button toDoList__button--delete\" onClick={() => this.props.removeToDo(this.props.index)}>&#10008;</button>\n                </div>\n            </li>\n        );\n    };\n}\n\nexport default ToDoItem;","import React from 'react';\nimport Header from './Header';\nimport ToDoList from './ToDoList';\nimport ToDoItem from './ToDoItem';\nimport './App.css';\n\nclass App extends React.Component{\n  state = {\n    items: [],\n    completeItems: 0,\n    removedItems: []\n  }\n  addToDo = item => {\n    const toDoItems = [...this.state.items];\n    toDoItems.push(item);\n    this.setState({\n      items : toDoItems\n    });\n  }\n  removeToDo = item => {\n    const toDoItems = [...this.state.items];\n    toDoItems.splice(item,1);\n    this.setState({\n      items : toDoItems\n    });\n  }\n  completeToDo = item => {\n    const completedToDos = this.state.completeItems + 1\n    const toDoItems = [...this.state.items];\n    toDoItems.splice(item,1);\n    this.setState({\n      items : toDoItems,\n      completeItems: completedToDos\n    });\n  }\n  render() {\n    return(\n      <div className=\"App\">\n        <Header title=\"To-Do List\" />\n        <ToDoList addToDo={this.addToDo} />\n        <ul className=\"toDoList\">\n          {Object.keys(this.state.items)\n            .map(key => <ToDoItem \n            key={key} \n            index={key}\n            details={this.state.items[key]}\n            removeToDo={this.removeToDo} \n            completeToDo={this.completeToDo}\n            />)}\n        </ul>\n        <div class=\"completed\">Complete: {this.state.completeItems}</div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}